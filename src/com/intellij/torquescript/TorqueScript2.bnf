{
    parserClass="com.intellij.torquescript.parser.TSParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    extends(".*expr")=expr
    extends(".*slot")=slot_acc
    extends(".*expstm")=expr//stmt_expr_

    psiClassPrefix="TS"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.torquescript.psi"
    psiImplPackage="com.intellij.torquescript.psi.impl"

    elementTypeHolderClass="com.intellij.torquescript.psi.TSTypes"
    elementTypeClass="com.intellij.torquescript.psi.TSElementType"
    tokenTypeClass="com.intellij.torquescript.psi.TSTokenType"
}

start ::= decl_list

decl_list ::= decl decl_list?

decl ::= stmt
       | fn_decl_stmt
       | package_decl

package_decl ::= PACKAGE ID LBRACE fn_decl_list RBRACE SEMICOLON

fn_decl_list ::= fn_decl_stmt
               | fn_decl_stmt fn_decl_list

statement_list ::= stmt statement_list?

stmt ::= if_stmt
       | while_stmt
       | for_stmt
       | foreach_stmt
       | datablock_decl
       | switch_stmt
       | BREAK SEMICOLON
       | CONTINUE SEMICOLON
       | RETURN SEMICOLON
       | RETURN expr SEMICOLON
       | expression_stmt SEMICOLON
       //| TTAG ASSIGN expr SEMICOLON
       //| TTAG ASSIGN expr COMMA expr SEMICOLON
       | DOCBLOCK
       | COMMENT

fn_decl_stmt ::= FUNCTION ID LPAREN var_list_decl RPAREN LBRACE statement_list RBRACE
               | FUNCTION ID COLONCOLON ID LPAREN var_list_decl RPAREN LBRACE statement_list RBRACE

var_list_decl ::= var_list?

var_list ::= VAR
           | VAR COMMA var_list

datablock_decl ::= DATABLOCK class_name_expr LPAREN expr parent_block RPAREN LBRACE slot_assign_list_opt RBRACE SEMICOLON

object_decl ::= NEW class_name_expr LPAREN object_name parent_block object_args RPAREN LBRACE object_declare_block RBRACE
              | NEW class_name_expr LPAREN object_name parent_block object_args RPAREN
              | NEW class_name_expr LPAREN LBRACK object_name RBRACK parent_block object_args RPAREN LBRACE object_declare_block RBRACE
              | SINGLETON class_name_expr LPAREN object_name parent_block object_args RPAREN LBRACE object_declare_block RBRACE
              | SINGLETON class_name_expr LPAREN object_name parent_block object_args RPAREN

parent_block ::= (COLON ID)?

object_name ::= expr?

object_args ::= (COMMA expr_list)?

object_declare_block ::= slot_assign_list
                      | object_decl_list
                      | slot_assign_list object_decl_list
                      |

object_decl_list ::= object_decl SEMICOLON
                   | object_decl object_decl_list

stmt_block ::= LBRACE statement_list RBRACE
               | stmt

switch_stmt ::= SWITCH LPAREN expr RPAREN LBRACE case_block RBRACE
              | SWITCHSTR LPAREN expr RPAREN LBRACE case_block RBRACE

case_block ::= CASE case_expr COLON statement_list
             | CASE case_expr COLON statement_list DEFAULT COLON statement_list
             | CASE case_expr COLON statement_list case_block

case_expr ::= expr
            | expr CASEOR case_expr

if_stmt ::= IF LPAREN expr RPAREN stmt_block
          | IF LPAREN expr RPAREN stmt_block ELSE stmt_block

while_stmt ::= WHILE LPAREN expr RPAREN stmt_block
             | DO stmt_block WHILE LPAREN expr RPAREN

for_stmt ::= FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN stmt_block
           | FOR LPAREN expr SEMICOLON expr SEMICOLON      RPAREN stmt_block
           | FOR LPAREN expr SEMICOLON      SEMICOLON expr RPAREN stmt_block
           | FOR LPAREN expr SEMICOLON      SEMICOLON      RPAREN stmt_block
           | FOR LPAREN      SEMICOLON expr SEMICOLON expr RPAREN stmt_block
           | FOR LPAREN      SEMICOLON expr SEMICOLON      RPAREN stmt_block
           | FOR LPAREN      SEMICOLON      SEMICOLON expr RPAREN stmt_block
           | FOR LPAREN      SEMICOLON      SEMICOLON      RPAREN stmt_block

foreach_stmt ::= FOREACH LPAREN VAR IN expr RPAREN stmt_block
               | FOREACHSTR LPAREN VAR IN expr RPAREN stmt_block

expression_stmt ::= expr {pin=1 recoverWhile=expression_recover} //stmt_expr TODO see if this messed anything up.
private expression_recover ::= !(SEMICOLON)

expr ::= /*stmt_expr
       | */unary_group
       | binop_group
       //| TTAG
       // Test
       | funcall_group
       | assert_group
       | obj_group
       | var_group
       | slot_group
       | ref_group
       | primary_group

private binop_group ::= gt_expr
                      | ge_expr
                      | lt_expr
                      | le_expr
                      | eq_expr
                      | neq_expr
                      | streq_expr
                      | strneq_expr
                      | logor_expr
                      | logand_expr
                      | lshft_expr
                      | rshft_expr
                      | cat_expr
                      | xor_expr
                      | mod_expr
                      | and_expr
                      | or_expr
                      | plus_expr
                      | minus_expr
                      | times_expr
                      | divide_expr

private unary_group ::= unary_compl_expr | unary_minus_expr | unary_neg_expr | unary_times_expr
private primary_group ::= tag_expr | float_expr | int_expr | break_expr | id_expr | str_expr | var_expr | var_idx_expr | inlineif_expr | paren_expr
private ref_group ::= slotid_expr | slotbrack_expr | intslot_expr | intslotrec_expr

slotid_expr ::= expr DOT ID {elementType=slot_acc}
slotbrack_expr ::= expr DOT ID LBRACK aidx_expr RBRACK {elementType=slot_acc}

slot_acc ::=

intslot_expr ::= expr INTERNALNAME class_name_expr
intslotrec_expr ::= expr INTERNALNAMERECUR class_name_expr

var_idx_expr ::= VAR LBRACK aidx_expr RBRACK
inlineif_expr ::= expr QUESTION expr COLON expr
paren_expr ::= LPAREN expr RPAREN

tag_expr ::= TAG
float_expr ::= FLOAT
int_expr ::= INTEGER
break_expr ::= BREAK
id_expr ::= ID
str_expr ::= STRING
var_expr ::= VAR

unary_minus_expr ::= MINUS expr
unary_times_expr ::= TIMES expr
unary_neg_expr ::= EXCLAMATION expr
unary_compl_expr ::= BITCOMPL expr

gt_expr ::= expr GT expr
ge_expr ::= expr GE expr
lt_expr ::= expr LT expr
le_expr ::= expr LE expr
eq_expr ::= expr EQUAL expr
neq_expr ::= expr NOTEQUAL expr
streq_expr ::= expr STREQUAL expr
strneq_expr ::= expr NOTSTREQUAL expr
logor_expr ::= expr LOGOR expr
logand_expr ::= expr LOGAND expr
lshft_expr ::= expr BITLSHIFT expr
rshft_expr ::= expr BITRSHIFT expr
cat_expr ::= expr CONCAT expr
xor_expr ::= expr BITXOR expr
mod_expr ::= expr MODULO expr
and_expr ::= expr BITAND expr
or_expr ::= expr BITOR expr
plus_expr ::= expr PLUS expr
minus_expr ::= expr MINUS expr
times_expr ::= expr TIMES expr
divide_expr ::= expr DIVIDE expr

class_name_expr ::= ID
                  | LPAREN expr RPAREN

assign_op_struct ::= PLUSPLUS
                   | MINUSMINUS
                   | PLUSASSIGN expr
                   | MINUSASSIGN expr
                   | TIMESASSIGN expr
                   | DIVIDEASSIGN expr
                   | MODULOASSIGN expr
                   | ANDASSIGN expr
                   | XORASSIGN expr
                   | ORASSIGN expr
                   | SHIFTLASSIGN expr
                   | SHIFTRASSIGN expr

stmt_expr ::= stmt_expr_
// Function calls
// asserts
// Object instancing
//
stmt_expr_ ::= funcall_group
            | assert_group
            | obj_group
            | var_group
            | slot_group
            /*funcall_expr //TODO: Implement funcalls
            | assert_expr
            | object_decl
            | VAR ASSIGN expr
            | VAR LBRACK aidx_expr RBRACK ASSIGN expr
            | VAR LBRACK aidx_expr RBRACK assign_op_struct
            | VAR assign_op_struct
            | slot_acc assign_op_struct
            | slot_acc ASSIGN expr
            | slot_acc ASSIGN LBRACE expr_list RBRACE*/

private funcall_group ::= funcall_1_expstm | funcall_2_expstm | funcall_3_expstm
private assert_group ::= assert_1_expstm | assert_2_expstm
private obj_group ::= obj_1_expstm | obj_2_expstm | obj_3_expstm | obj_4_expstm | obj_5_expstm
private var_group ::= var_1_expstm | var_2_expstm | var_3_expstm | var_4_expstm
private slot_group ::= slot_acc_1_expstm | slot_acc_2_expstm | slot_acc_3_expstm


funcall_1_expstm ::= expr DOT ID LPAREN expr_list_decl RPAREN
funcall_2_expstm ::= ID LPAREN expr_list_decl RPAREN
funcall_3_expstm ::= ID COLONCOLON ID LPAREN expr_list_decl RPAREN

func_call_objs ::= VAR | ID | ID LPAREN expr_list_decl RPAREN

assert_1_expstm ::= ASSERT LPAREN expr RPAREN
assert_2_expstm ::= ASSERT LPAREN expr COMMA STRING RPAREN

obj_1_expstm ::= NEW class_name_expr LPAREN object_name parent_block object_args RPAREN LBRACE object_declare_block RBRACE
obj_2_expstm ::= NEW class_name_expr LPAREN object_name parent_block object_args RPAREN
obj_3_expstm ::= NEW class_name_expr LPAREN LBRACK object_name RBRACK parent_block object_args RPAREN LBRACE object_declare_block RBRACE
obj_4_expstm ::= SINGLETON class_name_expr LPAREN object_name parent_block object_args RPAREN LBRACE object_declare_block RBRACE
obj_5_expstm ::= SINGLETON class_name_expr LPAREN object_name parent_block object_args RPAREN

var_1_expstm ::= VAR ASSIGN expr
var_2_expstm ::= VAR LBRACK aidx_expr RBRACK ASSIGN expr
var_3_expstm ::= VAR LBRACK aidx_expr RBRACK assign_op_struct
var_4_expstm ::= VAR assign_op_struct

slot_acc_1_expstm ::= slot_acc assign_op_struct
slot_acc_2_expstm ::= slot_acc ASSIGN expr
slot_acc_3_expstm ::= slot_acc ASSIGN LBRACE expr_list RBRACE

expr_list_decl ::= expr_list?

expr_list ::= expr
            | expr COMMA expr_list

slot_assign_list_opt ::= slot_assign_list?

slot_assign_list ::= slot_assign+

// Variable slots for constructors
slot_assign ::= ID ASSIGN expr SEMICOLON
              //| TYPEID ID ASSIGN expr SEMICOLON TODO What is this, can it be implemented?
              | DATABLOCK ASSIGN expr SEMICOLON
              | ID LBRACK aidx_expr RBRACK ASSIGN expr SEMICOLON
              //| TYPEID ID LBRACK aidx_expr RBRACK ASSIGN expr SEMICOLON TODO here as well

aidx_expr ::= expr
            | expr COMMA aidx_expr
